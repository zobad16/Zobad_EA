
'''#####################################################################################
'''####     Script Name: Positive Grid                                            ######
'''####     Author     : Zobad Mahmood                                              ######
'''####     Website    : www.algotradeup.com                                 ######
'''####     Date       : 14/07/2022 14:34:19               ######
'''####     Description: Simple positive grid                                             ######
'''#####################################################################################


''' <summary>
''' The main function is the entry point for any Script program
''' </summary>

'##Input Declaration
Dim symbol, lot_multiplier, initial_lot, take_profit,stop_loss,profit_target, risk_money, trade_comment,OrderPlaced, threshold, max_legs, pt, use_avg_tp_sl

' ' ' ###########################	INPUT PARAMS	###############################
symbol="GOLD"
initial_lot=0.10
lot_multiplier=1.25
take_profit=250
stop_loss=200
use_avg_tp_sl= TRUE
profit_target=250
risk_money=25
trade_comment="GridPositive"
threshold=250
max_legs=10
' ' '####################################################################################
Dim Point

Public Sub main()
''''TODO: Script program start methodEnd Sub
	dim p, val
	p = GetPoint()
	PrintLog("Profit Target: " & CDBL(profit_target) & " Loss Risk: " &(CDBL(risk_money) * -1) & " TP:" &CDBL(take_profit) & " SL: " &CDBL(stop_loss)) 
	val = threshold*p
	PrintLog(" Point: " & CStr(p) & " THRESHOLD*point: " &val )
End sub

''' <summary>
''' The function is generated when a new tick is received for any symbol
''' </summary>


Public Sub OnTick(symbolName)
''Get current symbol and place order
	Dim totalPos, count_buy, count_sell, profit	
	
	GetTotalPositions totalPos, count_buy, count_sell
	
	PlaceHedgeOrder totalPos, count_buy, count_sell 
	
	if(totalPos > 0) then
		MonitorPnl()
		MonitorGridPositive()
		if(use_avg_tp_sl=true) Then
			'ModifyPositionAverage()
		End If
	End if

End Sub

private Sub PlaceHedgeOrder( ByVal total , ByVal c_buy , ByVal c_sell )
	if(total <1 ) Then
		NewMarketOrder 1,CSTR(symbol),CDBL(initial_lot), CSTR(trade_comment) '(1/-1 = Buy / Sell, SymbolName, Lots)
		NewMarketOrder -1,CSTR(symbol),CDBL(initial_lot), CSTR(trade_comment) '(1/-1 = Buy / Sell, SymbolName, Lots)
		'ModifyPosition(-1)
		'ModifyPosition(1)
	End if
	if(c_buy > 0 and c_sell=0) Then
		NewMarketOrder -1,CSTR(symbol),CDBL(initial_lot), CSTR(trade_comment) '(1/-1 = Buy / Sell, SymbolName, Lots)
		'ModifyPosition(-1)
	End if
	if(c_buy = 0 and c_sell>0) Then
		NewMarketOrder 1,CSTR(symbol),CDBL(initial_lot), CSTR(trade_comment) '(1/-1 = Buy / Sell, SymbolName, Lots)
		'ModifyPosition(1)
	End if
End Sub

private Sub MonitorPnl()
	dim profit, loss
	loss = CDBL(risk_money) * -1
	profit = GetTotalProfit()
	'''PrintLog("Total positions: " & CSTR(totalPos) & " Buys# :" & CSTR(count_buy)& " Sells# : " & CSTR(count_sell) & " Profit: " &cstr(profit) )
	
	if (CDBL(profit) >= CDBL(profit_target) or CDBL(profit) <= (CDBL(loss)) )  then
		PrintLog("Closing trades- Dollar based stop hit: " &CStr(profit))
		CloseAll()
	End if
	

End Sub

private Sub MonitorGridPositive()
	''' 1) Check total buy legs and sell elgs
	''' 2) Check Grid Entry buy
	''' 3) Check Grid Entry sell
	Dim buy_count, sell_count, total_count
	GetTotalPositions total_count, buy_count, sell_count
	CheckPositiveGrid buy_count, 1 
	CheckPositiveGrid sell_count, -1
	
End Sub
private Sub CheckPositiveGrid(ByVal legs, ByVal mode)
	Dim open_price, a_point, curr_price, diff,n_lot
	a_point = GetPoint()
	open_price = 0.0
	if(legs < max_legs) Then
		open_price = GetLastOrderPrice(mode)
		'''PrintLog("Open price: " &CStr(open_price))
		if(mode = 1) Then
			SymbolInfoDouble CStr(symbol), SYMBOL_ASK, curr_price
			diff = Cdbl(curr_price) - CDbl(open_price) 
			'''PrintLog("Curr Price:" & CStr(curr_price) & "diff " & CStr(diff))
			if(diff >  (CDbl(threshold)* CDbl(a_point)) ) then
				PrintLog("Opening new buy leg")
				PrintLog((Cdbl(curr_price) - CDbl(open_price)))
				''' double lots_n = NormalizeDouble(Lot_Size * MathPow(Grid_Multiplier, buy_legs),2);
				''' Math.Pow(Number,Power)
				''' MathRound(10.12345,2)

				'''NewMarketOrder 1,CSTR(symbol),CDBL(initial_lot), CSTR(trade_comment)
				n_lot = MathRound(initial_lot * (lot_multiplier^legs),2)
				NewMarketOrder 1,CSTR(symbol),CDBL(n_lot), CSTR(trade_comment) '(1/-1 = Buy / Sell, SymbolName, Lots)
				'''Modify order sltp
				'''NewSLTPOrder(clng(ticketID),cdbl(OrderLots),cdbl(Bid-stoploss* pips2dbl),cdbl(Bid+takeprofit* pips2dbl))
			End if	
		End if
		if(mode = -1) Then
			SymbolInfoDouble CStr(symbol), SYMBOL_BID, curr_price 
			diff = Cdbl(open_price) - CDbl(curr_price) 
			'''PrintLog("Curr Price:" & CStr(curr_price) & "diff " & CStr(diff))
			
			if(diff> threshold*a_point) then
				PrintLog("Opening new sell leg")
				PrintLog((Cdbl(open_price) - CDbl(curr_price)))
				'''NewMarketOrder -1,CSTR(symbol),CDBL(initial_lot), CSTR(trade_comment)
				n_lot = MathRound(initial_lot * (lot_multiplier^legs),2)
				NewMarketOrder -1,CSTR(symbol),CDBL(n_lot), CSTR(trade_comment) '(1/-1 = Buy / Sell, SymbolName, Lots)
			End if	
		End If
	End if
	
End Sub



Public Function GetLastOrderPrice(ByVal op)
	dim ticket , o_price
	ticket = GetLastOrder(op , trade_comment)
	''' PrintLog("GetLastOrderPrice: TCKT: " & CStr(ticket))
	PositionSelect(Clng(ticket))
	PositionGetDouble POSITION_PRICE_OPEN , o_price 
	''' PrintLog("Last order price: " & CStr(o_price))
	GetLastOrderPrice = Cdbl(o_price)

End Function
Public Function GetLastOrder(ByVal op, ByVal comm)
	dim total, tkt, pos_time , t_time, f_tkt
	pos_time = #01/01/1994#
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
		if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol and GetPositionType() = CInt(op)) Then
			t_time = CDate(GetPositionTime())
			''' PrintLog("t: " & CStr(t_time) & " pos_T: " & CStr(pos_time) & " Ticket: " &Clng(tkt))
			if( CDate(t_time) > CDate(pos_time) ) Then
				pos_time = t_time
				f_tkt = clng(tkt)
				''' PrintLog("f_tkt: " &CLng(f_tkt))
			End If
		End If
				'''End if
	Next
	GetLastOrder = f_tkt
	
End Function

private sub GetTotalPositions()
	dim total, tkt, comm, count 
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
		if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol) then ' ' AND GetPositionType() = TRADE_ACTION_SELL
		count=count+1	
		End if
	Next
	' ' 'PrintLog("Count " &count)
	'''return count
End sub

private sub GetTotalPositionsII( ByRef t )
End sub

''' <summary>
''' The function returns the total orders, buy orders and sell orders
''' </summary>
private sub GetTotalPositions( ByRef total_c, ByRef b_count , ByRef s_count)
	dim total, tkt, comm, count 
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
			if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol) then ' ' AND GetPositionType() = TRADE_ACTION_SELL
				count=count+1
				If (GetPositionType() = -1) then 
				s_count=s_count+1
				End if
				If(GetPositionType() = 1) then 
				b_count=b_count+1
				End if
			End if
	Next
	total_c = count
	
End sub
Public Function GetPoint()
	dim piploc, Point
	SymbolInfoInteger cstr (symbol), SYMBOL_PIP_LOCATION, piploc
	Point=10^piploc
	GetPoint = Point
End Function
''' <summary>
''' The function returns the total orders, buy orders and sell orders
''' </summary>
Public Function GetTotalProfit()
	dim total, tkt, comm, profit, pos_profit 
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
			if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol) then ' ' AND GetPositionType() = TRADE_ACTION_SELL
				PositionGetDouble POSITION_PROFIT , pos_profit
				profit = profit + pos_profit
			End if
	Next
	GetTotalProfit = Cdbl(profit)
	
End Function

private sub CloseAllMulti()
	dim total, tkt, comm, count, Tickets, lot, Lots 
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
		if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol) then ' ' AND GetPositionType() = TRADE_ACTION_SELL
			Tickets = tkt & "," &  Tickets
			PositionGetDouble POSITION_AMOUNT, lot
			Lots = lot & "," & Lots  
		End if
	Next
	'''PrintLog("Tickets: " & Tickets)
	'''PrintLog("Lots: " & Lots)
	If CloseMultiPositions(Cstr(Tickets), Cstr(Lots))= false then 
		PrintLog( ErrorDescription(GetLastError()) )
	End IF 

	' ' 'PrintLog("Count " &count)
	'''return count
End sub

private sub CloseAll()
	dim total, tkt, comm, count, Tickets, lot, Lots 
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
		if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol) then ' ' AND GetPositionType() = TRADE_ACTION_SELL
			Tickets = tkt & "," &  Tickets
			PositionGetDouble POSITION_AMOUNT, lot
			If CloseMarketOrder(Clng(tkt),Cdbl(lot))= false then 
				PrintLog( ErrorDescription(GetLastError()) )
			End IF  
		End if
	Next
End sub
Public Function ModifyPosition(ByVal op)
	dim total, tkt, pos_time , t_time, f_tkt, slp, tpp, smb
	dim OrderLots, point
	Symbol=ChartSymbol(0)
	SymbolInfoDouble cstr(symbol),SYMBOL_ASK,Ask
	SymbolInfoDouble cstr(symbol),SYMBOL_BID,Bid
	point = GetPoint()
	if(sl = 0) Then
		slp = ""
	End If
	if(tp = 0) Then
		tpp = ""
	End if
	if(op = -1) Then
		if(sl >0) Then
			slp = cdbl(Ask+sl* point)
		End If
		if(tp > 0) Then
			tpp = cdbl(Ask-tp* point)
		End If
	End If
	if(op = 1) Then
		if(sl >0) Then
			slp = cdbl(Ask-sl* point)
		End If
		if(tp > 0) Then
			tpp = cdbl(Ask+tp* point)
		End If
	End If
	pos_time = #01/01/1994#
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
		smb = GetPositionSymbol()
		if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol and GetPositionType() = CInt(op)) Then
			PrintLog("Modifying TP/SL")
			PositionGetDouble POSITION_AMOUNT,OrderLots
			if(getPositiontype()=op) then					
				result = NewSLTPOrder(clng(ticketID),cdbl(OrderLots),tpp,slp)
			end If
		End If
				'''End if
	Next
End Function


''' <summary>
''' The function is generated when initialization script
''' </summary>

Public Sub OnInit()
	tp = CDBL(tp)
	sl = CDBL(sl)
End Sub


''' <summary>
''' The function is generated when deinitialization script
''' </summary>

Public Sub OnDeInit()
''''TODO: deinitialization method

End Sub


''' <summary>
''' The OnTimer function called when the timer event occurs
''' </summary>

Public Sub OnTimer()
''''TODO: Timer Function
End Sub

''' <summary>
''' The OnCalculate function called when a new candle received
''' </summary>

Public Sub OnCalculate(symbol, symbolPeriod, openVal, highVal, lowVal, closeVal)

End Sub
''' <summary>
''' Raise when all data  are loaded after Login 
''' </summary>

Public Sub AllDataLoaded()

End Sub
''' <summary>
''' Raise when Account Selected 
''' </summary>

Public Sub AccountSelected(accountNumber)

End Sub
''' <summary>
''' Raise when the server returns order result 
''' </summary>

Public Sub OnOrderTrade(actionType ,orderID , returnValue)

End Sub
''' <summary>
''' Raise when the server returns position result 
''' </summary>
Public Function ModifyPositionFix(ByVal tckt)
	dim total, tkt, pos_time , t_time, f_tkt, slp, tpp, op_price, tp,sl,comm,smb
	dim OrderLots, point
	Symbol=ChartSymbol(0)
	point = GetPoint()
	tp=take_profit
	sl=stop_loss
	PrintLog("ModifyPositionFix: TCKT#" &clng(tckt))
	
	PositionSelect(clng(tckt))
	PositionGetDouble POSITION_AMOUNT,OrderLots
	PositionGetString POSITION_COMMENT,comm
	smb = GetPositionSymbol()
	if(getPositiontype()=TRADE_ACTION_SELL and comm = trade_comment and smb = symbol ) then
		SymbolInfoDouble cstr(symbol),SYMBOL_ASK,Ask
		SymbolInfoDouble cstr(symbol),SYMBOL_BID,Bid
		if(cdbl(sl) >0 and cdbl(tp) >0) Then
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(Ask+sl* point),cdbl(Bid-tp* point))
			
		End If
		if(cdbl(tp) > 0 and cdbl(sl) =0) Then
			PrintLog("SELL- Updating tp only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(sl),cdbl(Ask-tp* point))
		End If		
		if(cdbl(tp)= 0 and cdbl(sl) > 0) Then
			PrintLog("SELL- Updating sl only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(Ask+sl* point),cdbl(tp))
		End If	
	
	End if
	if(getPositiontype()=TRADE_ACTION_BUY and comm = trade_comment and smb = symbol) then
		SymbolInfoDouble cstr(symbol),SYMBOL_ASK,Ask
		SymbolInfoDouble cstr(symbol),SYMBOL_BID,Bid
		PrintLog("Updating tp/sl: Ticket: " &cstr(tckt) & " op: BUY :sl " & cstr(sl))
		if(cdbl(sl) >0 and tp >0) Then
			PrintLog("Updating tp/sl sl:" &cdbl(Bid-sl* point))
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(Bid-sl* point),cdbl(Ask+tp* point))
		End If
		if(cdbl(tp)> 0 and cdbl(sl) =0) Then
			PrintLog("BUY- Updating tp only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(sl),cdbl(Ask+tp* point))
		End If		
		if(cdbl(tp)= 0 and cdbl(sl) > 0) Then
			PrintLog("BUY- Updating sl only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(Bid-sl* point),cdbl(tp))
		End If
	End If
	
End Function
Public Function ModifyPositionAvg(ByVal tckt)
	dim total, tkt, pos_time , t_time, f_tkt, slp, tpp, op_price, tp,sl,comm,smb
	dim OrderLots, point
	Symbol=ChartSymbol(0)
	point = GetPoint()
	tp=take_profit
	sl=stop_loss
	PrintLog("ModifyPositionAVG: TCKT#" &clng(tckt))
	dim be_price
	CalculateBEPrice be_price

	PositionSelect(clng(tckt))
	PositionGetDouble POSITION_AMOUNT,OrderLots
	PositionGetString POSITION_COMMENT,comm
	smb = GetPositionSymbol()
	if(getPositiontype()=TRADE_ACTION_SELL and comm = trade_comment and smb = symbol ) then
		SymbolInfoDouble cstr(symbol),SYMBOL_ASK,Ask
		SymbolInfoDouble cstr(symbol),SYMBOL_BID,Bid
		if(cdbl(sl) >0 and cdbl(tp) >0) Then
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(be_price+sl* point),cdbl(be_price-tp* point))
			
		End If
		if(cdbl(tp) > 0 and cdbl(sl) =0) Then
			PrintLog("SELL- Updating tp only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(sl),cdbl(be_price-tp* point))
		End If		
		if(cdbl(tp)= 0 and cdbl(sl) > 0) Then
			PrintLog("SELL- Updating sl only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(be_price+sl* point),cdbl(tp))
		End If	
	
	End if
	if(getPositiontype()=TRADE_ACTION_BUY and comm = trade_comment and smb = symbol) then
		SymbolInfoDouble cstr(symbol),SYMBOL_ASK,Ask
		SymbolInfoDouble cstr(symbol),SYMBOL_BID,Bid
		PrintLog("Updating tp/sl: Ticket: " &cstr(tckt) & " op: BUY :sl " & cstr(sl))
		if(cdbl(sl) >0 and tp >0) Then
			PrintLog("Updating tp/sl sl:" &cdbl(be_price-sl* point))
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(be_price-sl* point),cdbl(be_price+tp* point))
		End If
		if(cdbl(tp)> 0 and cdbl(sl) =0) Then
			PrintLog("BUY- Updating tp only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(sl),cdbl(be_price+tp* point))
		End If		
		if(cdbl(tp)= 0 and cdbl(sl) > 0) Then
			PrintLog("BUY- Updating sl only")
			result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(be_price-sl* point),cdbl(tp))
		End If
	End If
	
End Function
Public Function ModifyPositionAverage()
	dim be_price
	CalculateBEPrice be_price
	PrintLog("Breakeven price: " &be_price)
	''' TODO: 1) loop through positions 
	''' 2) check if position have tp/sl and update tpsl order
	''' 3) if not found add new tpsl order
	dim total, tkt, smb, comm, i
	
	'''Symbol=ChartSymbol(0)
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		if PositionSelect(Clng(tkt)) then
			PositionGetString POSITION_COMMENT,comm
			''smb = GetPositionSymbol()
			if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol ) Then
				if(RequestManageOrders(CLNG(tkt))) Then
					PrintLog("Requesting Ticket#" &CLNG(tkt))
				Else
					PrintLog("Requesting Failed. Ticket#" &CLNG(tkt))
				End If
			End If
		End if
	Next
End Function
Public Sub CalculateBEPrice(ByRef result)
	dim tkt, comm,lot
	dim sum_lots, op_price, weighted_price, sum_weighted_price
	total = PositionTotal()
	For i = 1 to total
		tkt = PositionGetTicket(Cint(i))
		PositionSelect(Clng(tkt)) 
		PositionGetString POSITION_COMMENT,comm
		if( comm= trade_comment and PositionGetSymbol(Cint(i)) = symbol) then ' ' AND GetPositionType() = TRADE_ACTION_SELL
			PositionGetDouble POSITION_AMOUNT, lot
			PositionGetDouble POSITION_PRICE_OPEN ,op_price
			weighted_price = lot * op_price
			sum_weighted_price = sum_weighted_price+weighted_price
			sum_lots = sum_lots+lot
		End if
	Next
	result = sum_weighted_price/sum_lots
End Sub
Public Sub OnPositionTrade (actionType ,ticketID)
	if(actionType=5) then
		if(CBool(use_avg_tp_sl) = FALSE) then
			ModifyPositionFix clng(ticketID)
		End If
		if(CBool(use_avg_tp_sl) = TRUE) then
			ModifyPositionAvg clng(ticketID)
			ModifyPositionAverage()
		End If

	end if
	
End Sub

''' <summary>
''' Raise when the server returns Manage SL/TP Orders after calling RequestManageOrders method  
''' </summary>

public sub OnManageOrdersReceived(manageOrders)
	''' Set tp/sl if not exist
	PrintLog(">>>>>>>>>>>OnManageOrdersReceived: Ticket#" &CLNG(manageOrders.Ticket))
	Dim i , op, result, tp, sl, point
	Dim o_sl, o_tp, o_lots, be_price, o_price
	Dim comm
	CalculateBEPrice be_price
	point = GetPoint()
	if PositionSelect(CLNG(manageOrders.Ticket)) Then
		'''PrintLog("Position selected")
		PositionGetString POSITION_COMMENT,comm
		
		if( comm= trade_comment and GetPositionSymbol() = symbol) Then
			op=GetPositionType()
			PositionGetDouble POSITION_AMOUNT,o_lots
			PositionGetDouble POSITION_PRICE_OPEN , o_price
		End if
	End If
	PrintLog("#TICKET# " &CSTR(manageOrders.Ticket)& " |op: " &CINT(op)&" |Lots: " &CDBL(o_lots)& " |O_price: " &CDBL(o_price))
	''' ### New tp/sl
	if CINT(manageOrders.Count())=0 Then
		PrintLog("#NEW SLTP ORDER: ")
		''' result = NewSLTPOrder(clng(tckt),cdbl(OrderLots),cdbl(sl),cdbl(Ask+tp* point))
		if(CINT(op)=1) Then
			if(CDBL(take_profit)>0)Then
				tp=CDBL(be_price)+(CDBL(take_profit)*point)
			else
				tp=0
			End If
			if(CDBL(stop_loss)>0)Then
				sl=CDBL(be_price)-(CDBL(stop_loss)*point)
			else
				sl=0
			End If
			'AlertMessage("Average TP/SL")
			result=NewSLTPOrder(CLNG(manageOrders.Ticket), CDBL(o_lots),CDBL(sl),CDBL(tp))
		end If
		if(CINT(op)=-1) Then
			if(take_profit>0) Then
				tp= CDBL(be_price) - (CDBL(take_profit) * point)
			else
				tp=0
			End If
			if(stop_loss>0)Then
				sl=CDBL(be_price)+(CDBL(stop_loss)*point)
			else
				sl=0
			End If
			'AlertMessage("Average TP/SL")
			result=NewSLTPOrder(CLNG(manageOrders.Ticket), CDBL(o_lots),CDBL(sl),CDBL(tp))
		End If
	
		
	Else 
		PrintLog(">>>>>>>>>>>>>>Update SLTP ORDER: Ticket#: " &clng(manageOrders.Ticket))
		For i = 1 To manageOrders.Count()
			UpdateOrderSLTP clng(manageOrders.orders(i)), CDBL(o_lots),CINT(op)
		Next
	End if

	''' ### Update TPSL
	
End Sub
public Function UpdateOrderSLTP(ByVal ticket, ByVal lot, ByVal op)
	Dim tp,sl, be_price
	CalculateBEPrice be_price
	point = GetPoint()
	
	if(CINT(op)=1) Then
			PrintLog("Updating BUY TPSL")
			if(CDBL(take_profit)>0)Then
				tp=CDBL(be_price)+(CDBL(take_profit)*point)
			else
				tp=0
			End If
			if(CDBL(stop_loss)>0)Then
				sl=CDBL(be_price)-(CDBL(stop_loss)*point)
			else
				sl=0
			End If
			'AlertMessage("Average TP/SL")
			result=UpdateSLTPOrder(CLNG(ticket), CDBL(lot),CDBL(sl),CDBL(tp))
	end If
	if(CINT(op)=-1) Then
			PrintLog("Updating SELL TPSL")
			if(take_profit>0) Then
				tp= CDBL(be_price) - (CDBL(take_profit) * point)
			else
				tp=0
			End If
			if(stop_loss>0)Then
				sl=CDBL(be_price)+(CDBL(stop_loss)*point)
			else
				sl=0
			End If
			'AlertMessage("Average TP/SL")
			result=UpdateSLTPOrder(CLNG(ticket), CDBL(lot),CDBL(sl),CDBL(tp))
	End If
	
End Function
''' <summary>
''' Generatd after requested prices from the server for new symbol 
''' </summary>

Public Sub PriceLoaded(TimeArr,OpenArr,HighArr,LowArr,CloseArr)
 '''TODO: Implement the handler

End Sub
''' <summary>
''' Generatd after change the chart period 
''' </summary>

Public Sub PeriodChanged (PeriodName, SymbolName)
 '''TODO: Implement the handler

End Sub 